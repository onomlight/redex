#리덕스란 ? 
- 크로스 컴포넌트 또는 앱 와이드 상태를 위한 상태관리 시스템
>>> 어플을 변경하고 화면에 표시하는 데이터 관리에 도움

아래 순서대로 구분가능함! 
1. 로컬상태        
단일 구성 요소에 속하는 상태
예: 입력 필드에서 사용자 입력 청취; 토글
"더 보기" 세부 정보 필드

구성요소 내부에서 관리해야 함
useState() / useReducer()


2. 크로스 컴포넌트 상태
여러 구성 요소에 영향을 미치는 상태
예: 모달 오버레이의 열기/닫힘 상태

Requires "prop chains"  /
 "prop drilling"


3. 앱 와이드 상태
전체 앱(대부분/모든 구성 요소)에 영향을 미치는 상태
예: 사용자 인증 상태

Requires "prop chains"  /
 "prop drilling"

 #리덕스가 필요한 이유
단점
 1. 
 리액트 컨텍스트를 사용하면 설명과 상태 관리가 아주 복잡해질수있다
 그리고 복잡성은 구축하는 어플종류에 따라 달라짐[ContextProvider 컴포넌트가 아주 많이 있게 됨]
 ==> 거대한 커넥트 를 가지게됨

 2. 
 모든 시나리오와 모든 경우에서 리덕스를 훌륭하게 대체할 수 없음
 ==> 고빈도 상태에서 컨텍스트를 사용하지 말아야함 

 #리덕스 작동방식
 >>애플리케이션에 있는 하나의 중앙 데이터 저장소 !! 2개이상 갖지않음
 >> 어플 모든 상태 저장 -> 인증 상태 테마 입력상태 등

 ++ Reducer Function 이라는 함수 기억해야함
 useReducer과 다름 
 
 리듀서 함수는 일반적인 개념

리듀서 함수는 입력을 받아서 그 입력을 변환하고 줄이는 함수입
